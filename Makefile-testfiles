# Instructions for generating sample test files
#
# Copyright (c) 2023 Dan Fandrich <dan@coneharvesters.com>
# Licensed under the MIT license (see LICENSE).
#
# The resulting files are checked in (with a few exceptions at the end) so that
# these commands never need to be run again.  Smaller file size is sometimes
# prioritized over ease of creation. All generated files must also be able to
# be released to the public domain.  Some of these commands were documented
# after the fact & are therefore not well tested.
#
# Many of these rules must be run as root to generate reproducible output.

all:
	@echo Use this makefile to generate individual test files

foo:
	echo foo >foo
	# Note: some formats need this ownership changed to avoid leaking user info
	# and for better consistency
	chown root:root foo

type1.png: type1.pbm
	@echo This file was manually converted and tags added from type1.pbm with Kolourpaint

type1.tiff: type1.pbm
	@echo This file was manually converted with Gimp and tags added using tiffset

type2.png: type1.pbm
	@echo This file was manually converted and tags added from type1.pbm with Kolourpaint

type1.pdf:
	@echo This file was manually created in Scribus with "Outline all fonts" enabled

type1.wacz:
	@echo This file was manually created using ArchiveWeb.page with a web
	@echo server run with 'python3 -m http.server'

type1.warc.gz:
	@echo This file was manually created using ArchiveWeb.page with a simple
	@echo custom Python web server that adds custom headers that was run with:
	@echo "  python2 httpd.py 8000 'WARC-Date: April 1, 2345' 'isPartOf: bogus header to be ignored"
	@echo and the final .warc.gz file was extracted from the .wacz file produced.

type1.epub:
	@echo This file was manually created in Libreoffice

type1.wml:
	@echo This file was manually created in AbiWord

type1.cab:
	@echo This file was created in Windows XP with the commands:
	@echo '  echo foo >foo'
	@echo '  makecab foo type1.cab'

type1.gcode:
	@echo This file was created in PrusaSlicer 2.5.0 by slicing a 1×1×0.2mm
	@echo box without skirt then manually deleting the embedded thumbnails and
	@echo prusa_config metadata

type1.arj: foo
	echo ARJ archive comment >cmt
	arj a type1.arj foo
	arj c type1.arj -zcmt

type1.rpm: autodescribe-test.spec
	rpmbuild -bb -D'vendor nobody' -D'packager dfandrich' -D'_buildhost localhost' autodescribe-test.spec

type1.wav:
	dd if=/dev/zero count=64 bs=1 | sox -r 8000 -c 1 -t s1 - empty.wav
	ffmpeg -i empty.wav -acodec copy -metadata title='WAV title' -y "$@"

type1.aiff:
	dd if=/dev/zero count=64 bs=1 | sox -r 8000 -c 1 -t s1 - empty.wav
	ffmpeg -i empty.wav -acodec copy -metadata title='AIFF title' -y "$@"

type1.mp3: type1.wav
	lame --noreplaygain type1.wav "$@"
	id3v2 -1 -a 'MP3 Artist' -t 'MP3 Song' -c 'MP3 Comment' "$@"

type2.mp3: type1.wav
	lame --noreplaygain type1.wav "$@"
	id3v2 -2 -a 'MP3 Artist' -t 'MP3 Song' -c 'MP3 Comment' "$@"

type1.flac: type1.wav
	flac -o "$@" --padding=0 type1.wav
	printf "TITLE=FLAC title\nARTIST=FLAC artist\n" | metaflac --remove-all-tags --import-tags-from=- -- "$@"

type1.ogg:
	dd if=/dev/zero count=64 bs=1 > empty.raw
	oggenc -r -B 8 -C 1 -R 8000 -q -1 -a 'OGG artist' -t 'OGG title' -d 2021 -G Experimental -o "$@" empty.raw

type2.ogg:
	dd if=/dev/zero count=64 bs=1 > empty.raw
	oggenc -r -B 8 -C 1 -R 8000 -q -1 -t 'OGG title' -o "$@" empty.raw

type1.webm:
	ppmmake black 160 120 | pnmtopng >black.png
	ffmpeg -r 15 -f image2 -i black.png -metadata title='WEBM title' -y "$@"

type1.mp4:
	ppmmake black 160 120 | pnmtopng >black.png
	ffmpeg -r 12 -f image2 -i black.png -metadata title='MPEG-4 title' -pix_fmt yuv420p -vcodec libx264 -bf 0 -tune stillimage -y "$@"

type1.avi:
	ppmmake black 160 120 | pnmtopng >black.png
	ffmpeg -r 12 -f image2 -i black.png -metadata title='AVI title' -pix_fmt yuvj422p -vcodec mjpeg -y tmp.avi
	# Mencoder produces a smaller file, so reencode it only for that reason
	mencoder tmp.avi -of avi -ovc copy -info name='AVI title' -o "$@"

type1.zpaq: foo
	-rm "$@"
	zpaq a "$@" foo

type1.ppm:
	ppmmake black 1 1 > "$@"

type1.jpg:
	ppmmake black 1 1 | pnmtojpeg --comment='JPEG comment' > "$@"

type2.jpg:
	ppmmake black 1 1 | pnmtojpeg > black.jpg
	exif --tag=0x10e --ifd=0 -c -o "$@" --set-value='EXIF description' black.jpg

type1.tar: foo
	tar -cvf "$@" --owner=root --group=root -b 1 foo

type1.cpio: foo
	cpio -o --owner=root:root <<< foo > "$@"

type1.tgz: foo foo.1
	mkdir directory
	cp foo directory
	cp foo.1 directory
	tar --owner=root --group=root -czvf "$@" directory/

type1.lzh: foo
	echo LZH comment in desc.sdi file > desc.sdi
	lha a type1.lzh foo desc.sdi

type1.zip: foo
	printf 'Comment for file foo\nZip comment\nspanning two lines\n.\n' | zip -0 -c -z "$@" foo

type2.zip: foo
	printf 'ZIP comment in\ndesc.sdi file\n' > desc.sdi
	zip -0 "$@" foo desc.sdi

type1.shar: foo
	shar foo > "$@"

type1.gz: foo
	gzip foo
	mv foo.gz "$@"

type1.bz2: foo
	bzip2 foo
	mv foo.bz2 "$@"

type1.xz: foo
	xz foo
	mv foo.xz "$@"

type1.Z: foo
	compress foo
	mv foo.Z "$@"

type1.lzma: foo
	lzma foo
	mv foo.lzma "$@"

type1.lzo: foo
	lzop foo
	mv foo.lzo "$@"

type1.lz: foo
	lzip foo
	mv foo.lz "$@"

type1.rz: foo
	rzip -0 -o "$@" foo

type1.7z: foo
	7za a "$@" foo

# Deterministic mode, where owners, etc. are zeroed
type1.a: foo
	ar rD "$@" foo

# Preserve metadata, although use fixed uid/gid
type2.a: foo
	chmod 644 foo
	chown 1000:1000 foo
	ar r "$@" foo

type1.amf:
	openscad --export-format amf -o -  <(echo 'linear_extrude(1) polygon([[0,0], [0,1], [1,0], [0,0]]);') | xmlstarlet edit -a /amf/metadata -t elem -n 'metadata' -v "AMF name"  -a '/amf/metadata[not(@type)]' -t attr -n type -v name > "$@"

type2.amf: type1.amf
	cp type1.amf type2.amf
	zip -qm type2-zip.amf type2.amf
	mv type2-zip.amf type2.amf

type1.stl:
	openscad --export-format stl -o - <(echo 'linear_extrude(1) polygon([[0,0], [0,1], [1,0], [0,0]]);') | sed -e 's/OpenSCAD_Model$$/STL_name/' > "$@"

type2.stl:
	openscad --export-format binstl -o "$@" <(echo 'linear_extrude(1) polygon([[0,0], [0,1], [1,0], [0,0]]);')
	printf 'STL name\n\x00\x00\x00\x00\x00\x00' | dd of="$@" conv=notrunc

type1.3mf:
	test ! -e 3D # Abort if found to avoid accidentally deleting more than we want
	openscad --export-format 3mf -o "$@"  <(echo 'linear_extrude(1) polygon([[0,0], [0,1], [1,0], [0,0]]);')
	unzip -q "$@" 3D/3dmodel.model
	xmlstarlet edit -L -i  "/*[local-name()='model']/*[local-name()='resources']" -t elem -n metadata -v '3MF title'  -a "//*[local-name()='metadata'][not(@name)]" -t attr -n name -v Title 3D/3dmodel.model
	zip -f "$@" 3D/3dmodel.model
	rm -r 3D

type1.dat: foo
	pack foo "$@"

type2.dat: foo
	dat -a -f "$@" foo

type1.squashfs: foo
	mksquashfs foo "$@" -nopad -all-root -no-exports

# With volume ID
type1.iso: foo
	mkdir directory.tmp
	cp foo directory.tmp
	mkisofs -o "$@" -v -no-pad -appid application_id -publisher publisher_id -preparer preparer_id -V volume_id -volset volset_id directory.tmp
	rm -r directory.tmp

# No volume ID
type2.iso: foo
	mkdir directory.tmp
	cp foo directory.tmp
	mkisofs -o "$@" -v -no-pad -appid application_id -publisher publisher_id -preparer preparer_id -V '' -volset volset_id directory.tmp
	rm -r directory.tmp

type1.pcapng:
	randpkt -b 32 -c 2 -t arp "$@".tmp
	editcap -a '1:Packet comment' --capture-comment 'PCAP capture comment' -t 1639872000 "$@".tmp "$@"
	-rm "$@".tmp

type1.db:
	printf 'key\nvalue\n' | db53_load -T -t hash -c db_pagesize=512 "$@"

type1.gdbm:
	gdbmtool --norc -b 512 --newdb "$@" store key value

type1.sqlite:
	sqlite3 "$@" 'PRAGMA page_size=512; CREATE TABLE tab(k, v); INSERT INTO tab (k, v) VALUES ("key", "value");'

type1.jffs2: foo
	mkdir directory.tmp
	cp foo directory.tmp
	setfattr -n user.xdg.comment -v 'Extended filesystem attribute comment' directory.tmp/foo
	mkfs.jffs2 -v -l -q --with-xattr -o "$@" -r directory.tmp
	rm -r directory.tmp

type1.class:
	echo 'public class type1 { }' >type1.java
	javac type1.java
	rm type1.java

type1.gmo: type1.po
	msgfmt -c --statistics --verbose -o "$@" "$^"

type1.egg:
	test ! -e setup.cfg # Abort if found to avoid accidentally overwriting something important
	printf '[metadata]\nname = python-package-name\nsummary = package summary\nversion = 0\nauthor = Dan Fandrich\nlicense = public domain\nclassifiers = Programming Language :: Python\n' >setup.cfg
	python -c 'from setuptools import setup;setup()' bdist_egg
	mv dist/python_package_name-0-py*.egg "$@"

type1.whl:
	test ! -e setup.cfg # Abort if found to avoid accidentally overwriting something important
	printf '[build-system]\nrequires = ["setuptools>=42", "wheel"]\nbuild-backend = "setuptools.build_meta"\n' >pyproject.toml
	printf '[metadata]\nname = python-package-name\nsummary = package summary\nversion = 0\nauthor = Dan Fandrich\nlicense = public domain\nclassifiers = Programming Language :: Python\n' >setup.cfg
	python -m pip wheel .
	mv python_package_name-0-py3-none-any.whl "$@"

type1.slob:
	# Requires https://github.com/itkach/slob/
	printf 'import slob\nwith slob.create("type1.slob") as f:\n f.add(b"Word", "word")\n f.tag("label", "SLOB file label")\n' | python3

# The following files are pretty huge compared to others so they aren't
# included in the repository but can be generated here if needed.

type1.AppImage:
	mkdir directory.tmp
	printf '#!/bin/sh\necho AppImage\n' > directory.tmp/AppRun
	chmod 755 directory.tmp/AppRun
	ppmmake black 16 16 | pnmtopng > directory.tmp/icon.png
	printf '[Desktop Entry]\nType=Application\nVersion=1.0\nName=AppImage test\nExec=AppRun\nTerminal=true\nCategories=Development;\nIcon=icon\n' > directory.tmp/AppImage.desktop
	ARCH=x86_64 appimagetool directory.tmp type1.AppImage

# TDB files can be as small as 12 KiB holding data, so we need to figure out
# how to create one that small. --non-persistent is smaller but it results in
# "ERROR: could not open dbname" on read.
type1.tdb:
	dbwrap_tool --persistent --configfile=/dev/null "$@" store key uint32 1234
